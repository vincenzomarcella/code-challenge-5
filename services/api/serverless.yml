org: vincenzomarcella
app: code-challenge-5
service: api
frameworkVersion: '3'

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function

provider:
  name: aws
  runtime: nodejs14.x

custom:
  webpack:
    webpackConfig: webpack.config.js
    packager: "npm"
    includeModules:
      forceExclude:
        - aws-sdk

functions:
  fetchTickets:
    handler: src/ticket.fetch
    events:
      - httpApi:
          path: /{nextToken}
          method: get
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:Query
        Resource: ${cf:${self:provider.environment.TICKETS_RESOURCE_STACK}.TicketsTableArn}

  fetchTicket:
    handler: src/ticket.fetch
    events:
      - httpApi:
          path: /tickets/{ticketID}
          method: get
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:GetItem
        Resource: ${cf:${self:provider.environment.TICKETS_RESOURCE_STACK}.TicketsTableArn}
  
  updateTicket:
    handler: src/ticket.update
    events:
      - httpApi:
          path: /tickets/update/{ticketID}
          method: post
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:UpdateItem
        Resource: ${cf:${self:provider.environment.TICKETS_RESOURCE_STACK}.TicketsTableArn}
  
  deleteTicket:
    handler: src/ticket.delete
    events:
      - httpApi:
          path: /tickets/delete/{ticketID}
          method: delete
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:DeleteItem
        Resource: ${cf:${self:provider.environment.TICKETS_RESOURCE_STACK}.TicketsTableArn}

  createTicket:
    handler: src/ticket.create
    events:
      - httpApi:
          path: /tickets/create/{ticketID}
          method: post
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:PutItem
        Resource: ${cf:${self:provider.environment.TICKETS_RESOURCE_STACK}.TicketsTableArn}
