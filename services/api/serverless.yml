service: api
frameworkVersion: '3'
useDotenv: true

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function

provider:
  name: aws
  runtime: nodejs14.x

  stage: ${opt:stage, env:AWS_STAGE, 'dev'}
  region: ${opt:region, env:AWS_REGION, 'eu-central-1'}
  stackName: ${self:service}-${self:provider.stage}

  environment:
    TICKETS_RESOURCE_STACK: ${param:TICKETS_RESOURCE_STACK}

custom:
  webpack:
    webpackConfig: webpack.config.js
    packager: "npm"
    includeModules:
      forceExclude:
        - aws-sdk

functions:
  fetchTickets:
    handler: src/ticket.fetch
    environment:
      TICKETS_TABLE_ID: ${cf:${self:provider.environment.TICKETS_RESOURCE_STACK}.TicketsTableID}
    events:
      - httpApi:
          path: /{nextToken}
          method: get
    logging: true
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:Scan
        Resource: ${cf:${self:provider.environment.TICKETS_RESOURCE_STACK}.TicketsTableArn}

  fetchTicket:
    handler: src/ticket.fetch
    environment:
      TICKETS_TABLE_ID: ${cf:${self:provider.environment.TICKETS_RESOURCE_STACK}.TicketsTableID}
    events:
      - httpApi:
          path: /tickets/{ticketID}
          method: get
    logging: true
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:GetItem
        Resource: ${cf:${self:provider.environment.TICKETS_RESOURCE_STACK}.TicketsTableArn}
  
  updateTicket:
    handler: src/ticket.update
    environment:
      TICKETS_TABLE_ID: ${cf:${self:provider.environment.TICKETS_RESOURCE_STACK}.TicketsTableID}
    logging: true
    events:
      - httpApi:
          path: /tickets/update/{ticketID}
          method: post
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:UpdateItem
        Resource: ${cf:${self:provider.environment.TICKETS_RESOURCE_STACK}.TicketsTableArn}
  
  closeTicket:
    handler: src/ticket.close
    environment:
      TICKETS_TABLE_ID: ${cf:${self:provider.environment.TICKETS_RESOURCE_STACK}.TicketsTableID}
    events:
      - httpApi:
          path: /tickets/close/{ticketID}
          method: delete
    logging: true
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:DeleteItem
        Resource: ${cf:${self:provider.environment.TICKETS_RESOURCE_STACK}.TicketsTableArn}

  openTicket:
    handler: src/ticket.open
    environment:
      TICKETS_TABLE_ID: ${cf:${self:provider.environment.TICKETS_RESOURCE_STACK}.TicketsTableID}
    events:
      - httpApi:
          path: /tickets/open
          method: post
    logging: true
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:PutItem
        Resource: ${cf:${self:provider.environment.TICKETS_RESOURCE_STACK}.TicketsTableArn}

resources:
  - Outputs:
      AwsRegion:
        Value: ${opt:region, self:provider.region}
      
      TicketsTableArn:
        Value: ${cf:${self:provider.environment.TICKETS_RESOURCE_STACK}.TicketsTableArn}
      TicketsTableID:
        Value: ${cf:${self:provider.environment.TICKETS_RESOURCE_STACK}.TicketsTableID}